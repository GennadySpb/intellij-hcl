//noinspection BnfUnusedRuleForFile
/*
 * Copyright 2000-2015 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
//  org.intellij.plugins.hcl
  parserClass = 'org.intellij.plugins.hcl.HCLParser'
  parserUtilClass = "org.intellij.plugins.hcl.psi.HCLParserUtil"
  psiPackage = 'org.intellij.plugins.hcl.psi'
  psiImplPackage = 'org.intellij.plugins.hcl.psi.impl'

  elementTypeHolderClass = 'org.intellij.plugins.hcl.HCLElementTypes'
  elementTypeClass = 'org.intellij.plugins.hcl.HCLElementType'
  psiClassPrefix = 'HCL'
  psiVisitorName = 'HCLElementVisitor'

  psiImplUtilClass = 'org.intellij.plugins.hcl.psi.impl.HCLPsiImplUtilJ'
  tokenTypeClass = 'org.intellij.plugins.hcl.HCLTokenType'

  implements('value') = 'org.intellij.plugins.hcl.psi.HCLElement'
  mixin('value') = 'org.intellij.plugins.hcl.psi.impl.HCLElementImpl'

  tokens = [
//    space = "regexp:\s+"
    line_comment = "regexp:(//.*)|(#.*)"
    block_comment = "regexp:/\*([^*]|\*[^/])*\*?(\*/)?"

    L_PAREN='('
    R_PAREN=')'
    L_BRACKET='['
    R_BRACKET=']'
    L_CURLY='{'
    R_CURLY='}'
    COMMA=','
    EQUALS='='

    DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"

    NUMBER='regexp:-?(0x)?(0|[1-9])\d*(\.\d+)?([eE][-+]?\d+)?'

    TRUE='true'
    FALSE='false'
    NULL='null'

    ID="regexp:[a-zA-Z_][0-9a-zA-Z\-_]*"

    OP_DOT='.'

    // Operators
    OP_PLUS='+'
    OP_MINUS='-'
    OP_MUL='*'
    OP_DIV='/'
    OP_MOD='%'

    // Logic operators
    // Unary
    OP_NOT='!'
    // Binary
    OP_EQUAL='=='
    OP_NOT_EQUAL='!='
    OP_LESS='<'
    OP_GREATER='>'
    OP_LESS_OR_EQUAL='<='
    OP_GREATER_OR_EQUAL='>='
    OP_AND_AND='&&'
    OP_OR_OR='||'
    // Ternary condition
    OP_COLON=':'
    OP_QUEST='?'
  ]

  extends("container|literal|identifier")=value
  extends("array|object2|object")=container
  extends(".*_literal")=literal
  implements("property")=[
    "org.intellij.plugins.hcl.psi.HCLElement"
    'com.intellij.psi.PsiNameIdentifierOwner'
  ]
  implements("block")=[
    "org.intellij.plugins.hcl.psi.HCLElement"
    'com.intellij.psi.PsiNameIdentifierOwner'
  ]

  extends("Binary.+Expression")=BinaryExpression

  extends(".*Expression|.*Variable|ExpressionHolder|CollectionValue")=Expression
  extends("For.+Expression")=ForExpression
}

root ::= root_element*

private root_element ::= block_outer | property_outer

private property_outer ::= property_name property {
  pin=2
}

left property ::= '=' Expression {
  methods=[
    getName
    getNameElement
    getValue
    // suppress getValueList() accessor
//    value=""
    Expression=""
    property=""
    getPresentation
  ]
  mixin="org.intellij.plugins.hcl.psi.impl.HCLPropertyMixin"
  pin('.*')=1
}

private block_outer ::= property_name block {
  pin=2
}

left block ::= property_name* object {
  methods=[
      getName
      getFullName
      getNameElements
      getObject
      // suppress getValueList() accessor
      value=""
      getPresentation
  ]
  mixin="org.intellij.plugins.hcl.psi.impl.HCLBlockMixin"
  pin=2
}

object ::= '{' object_element* '}' {
  pin=1
  methods=[
    findProperty
    getPresentation
  ]
}

private object_element ::= (block_outer | property_outer) (','|&'}')? {
  pin=1
  recoverWhile = not_brace_or_next_value
}

private property_name ::= identifier | string_literal

fake container ::= {
}

value ::= literal | identifier | array | object2 {
  extends=Expression
  methods = [
    Expression=""
  ]
}


//region HCL2
Expression ::= (
      ParenthesizedExpression

    | ConditionalExpression

    | BinaryOrExpression
    | BinaryAndExpression

    | BinaryEqualityExpression
    | BinaryRelationalExpression

    | BinaryAdditionExpression
    | BinaryMultiplyExpression

    | MethodCallExpression
    | SelectExpression
    | IndexSelectExpression
    //| SplatSelectExpression // for now covered by IndexSelectExpression

    | ForArrayExpression | ForObjectExpression


    | CollectionValue
    | Variable
    | UnaryExpression
    //| TemplateExpression // TODO: Investigate templates
    | literal
) {
  name="expression"
  methods = [
  ]
}

// TODO: Check ILVariable
SelectExpression ::= Expression OP_DOT identifier {
  methods=[
    Expression=""
    from="Expression[0]"
    field="Expression[1]"
  ]
}

IndexSelectExpression ::= Expression ('[' Expression ']') {
  pin(".*")="'\['"
  extends = SelectExpression
}

SplatSelectExpression ::= Expression ('[' '*' ']' (IndexSelectExpression | SelectExpression)?) {
  pin(".*")="'\['"
  extends = SelectExpression
}

ParenthesizedExpression ::= '(' <<push 0>> Expression ')' <<pop>>

Variable ::= identifier | '*' {
  name="Identifier"
  implements="com.intellij.psi.PsiNamedElement"
  mixin="org.intellij.plugins.hcl.psi.impl.HCLVariableMixin"
}

CollectionValue ::= array | object2;

array ::= '[' array_element* ']'  {
  methods=[
    getPresentation
  ]
  pin=1
}

private array_element ::= (Expression) (','|&']') {
  pin=1
  recoverWhile = not_bracket_or_next_value
}

object2 ::= '{' object_element2* '}' {
  pin=1
  methods=[
    findProperty
    getPresentation
  ]
}

private object_element2 ::= (ObjectElement) (','|&'}')? {
  pin=1
  recoverWhile = not_brace_or_next_value_2
}
private ObjectElement ::= (identifier | Expression) property
{
  pin=2
}

TemplateExpression ::= string_literal | heredoc_literal;

MethodCallExpression ::= Expression ParameterList
{
  methods=[
    Callee="Expression"
    ParameterList="ParameterList"
    getQualifier
    getMethod
  ]
}
ParameterList ::= '(' (Expression? (',' Expression)* (',' | '...')?)? ')' {
  pin(".*")=1
  methods=[
    Expression=""
    Parameters="Expression"
  ]
}


fake ForExpression ::=ForIntro Expression? ForCondition?
{
  methods=[
    Intro="ForIntro"
    Condition="ForCondition"
  ]
}

ForArrayExpression ::= "[" ForIntro Expression ForCondition? "]"
{
  extends=ForExpression
}
ForObjectExpression ::= "{" ForIntro Expression "=>" Expression "..."? ForCondition? "}"
{
  extends=ForExpression
}

ForIntro ::= "for" identifier ("," identifier)? ("in" Expression) ":"
{
  pin('.*')=1
  methods=[
    getVar1
    getVar2
    getContainer
    Expression=""
  ]
}
ForCondition ::= "if" Expression
{
  pin=1
}



// TODO: Priorities
UnaryExpression ::= unaryOp Expression
{
  methods = [
    operand="Expression"
    getOperationSign
  ]
}

fake BinaryExpression ::= Expression+ {
  mixin="org.intellij.plugins.hcl.psi.impl.HCLBinaryExpressionMixin"
  methods = [
    Expression=""
    LOperand="Expression[0]"
    ROperand="Expression[1]"
    getOperationSign
  ]
}

BinaryRelationalExpression ::= Expression relationalOp Expression
BinaryEqualityExpression ::= Expression equalityOp Expression

BinaryAndExpression ::= Expression andOp Expression
BinaryOrExpression ::= Expression orOp Expression

BinaryAdditionExpression ::= Expression addOp Expression
BinaryMultiplyExpression ::= Expression mulOp Expression



ConditionalExpression ::= Expression('?' <<push 1>> Expression (':' Expression) <<pop>>)
{
  pin(".*")="'\?'|'\:'"
  methods=[
    condition="Expression[0]"
    then="Expression[1]"
    else="Expression[2]"
  ]
}

// Kinda interpolations (HIL)
Template ::= (
    TemplateExpression |
    TemplateInterpolation |
    TemplateDirective
)*
TemplateDirective ::= TemplateIf | TemplateFor;
TemplateInterpolation ::= ("${" | "${~") Expression ("}" | "~}")
TemplateIf ::= (
    ("%{" | "%{~") "if" Expression ("}" | "~}")
    Template
    (
        ("%{" | "%{~") "else" ("}" | "~}")
        Template
    )?
    ("%{" | "%{~") "endif" ("}" | "~}")
);
TemplateFor ::= (
    ("%{" | "%{~") "for" identifier ("," identifier) "in" Expression ("}" | "~}")
    Template
    ("%{" | "%{~") "endfor" ("}" | "~}")
);


// Operators
private mulOp ::= OP_MUL | OP_DIV | OP_MOD
{
  name="operator"
}
private addOp ::= OP_PLUS | OP_MINUS
{
  name="operator"
}
private unaryOp ::= OP_MINUS | OP_NOT
{
  name="operator"
}
private orOp ::= OP_OR_OR
{
  name="operator"
}
private andOp ::= OP_AND_AND
{
  name="operator"
}
private equalityOp ::= OP_EQUAL
                    | OP_NOT_EQUAL
{
  name="operator"
}
private relationalOp ::= OP_LESS
                       | OP_GREATER
                       | OP_LESS_OR_EQUAL
                       | OP_GREATER_OR_EQUAL
{
  name="operator"
}


//endregion HCL2


identifier ::= ID {
  name = "identifier"
  methods = [
    getId
    ID=""
  ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLIdentifierMixin'
}


literal ::= string_literal | number_literal | boolean_literal | null_literal | heredoc_literal {
  methods = [
    isQuotedString
    Expression=""
  ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLLiteralMixin'
}

string_literal::= DOUBLE_QUOTED_STRING | SINGLE_QUOTED_STRING {
  name = "string literal"
  methods=[
    getTextFragments
    getValue
    getQuoteSymbol
    SINGLE_QUOTED_STRING=""
    DOUBLE_QUOTED_STRING=""
  ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLStringLiteralMixin'
}
number_literal::= NUMBER {
  name="number"
  methods=[
    getValue
    NUMBER=""
  ]
}
boolean_literal::= TRUE | FALSE {
  name="boolean"
  methods=[
    getValue
  ]
}
null_literal::= NULL {
  name="null"
}

heredoc_literal::= heredoc {
  name="heredoc"
  methods=[
    getValue
    heredoc_marker=""
    content="heredoc_content"
    marker-start="heredoc_marker[0]"
    marker-end="heredoc_marker[1]"
    isIndented
    getIndentation
  ]
}
private heredoc::= HD_START heredoc_marker heredoc_content heredoc_marker
heredoc_content::=heredoc_line* {
  methods=[
    getLines
    getLinesRaw
    getLinesCount
    getValue
    getMinimalIndentation
    getTextFragments
 ]
  mixin = 'org.intellij.plugins.hcl.psi.impl.HCLHeredocContentMixin'
}
private heredoc_line::= HD_LINE HD_EOL {
  name = "heredoc content"
}
heredoc_marker::= HD_MARKER {
  methods=[
    getName
  ]
  name = "heredoc anchor" // called that way in HCL parser errors. In bash it's 'limit string'
}


// Recoveries
private not_bracket_or_next_value ::= !(']'|Expression)
private not_brace_or_next_value ::= !('}'|value)

private not_brace_or_next_value_2 ::= !('}'|ObjectElement)

